diff -ruaN include/net/inet_connection_sock.h include/net/inet_connection_sock.h
--- include/net/inet_connection_sock.h	2021-05-19 16:30:06.000000000 +0800
+++ include/net/inet_connection_sock.h	2021-05-22 11:33:34.898841467 +0800
@@ -134,8 +134,8 @@
	u32			  icsk_probes_tstamp;
	u32			  icsk_user_timeout;
 
-	u64			  icsk_ca_priv[104 / sizeof(u64)];
+	u64			  icsk_ca_priv[112 / sizeof(u64)];
 #define ICSK_CA_PRIV_SIZE	  sizeof_field(struct inet_connection_sock, icsk_ca_priv)
 };
 
 #define ICSK_TIME_RETRANS	1	/* Retransmit timer */

diff -ruaN include/net/tcp.h include/net/tcp.h
--- include/net/tcp.h	2021-05-19 16:30:06.000000000 +0800
+++ include/net/tcp.h	2021-05-22 11:33:34.898841467 +0800
@@ -576,6 +576,8 @@
 #endif
 /* tcp_output.c */
 
+u32 tcp_tso_autosize(const struct sock *sk, unsigned int mss_now,
+		     int min_tso_segs);
 void __tcp_push_pending_frames(struct sock *sk, unsigned int cur_mss,
 			       int nonagle);
 int __tcp_retransmit_skb(struct sock *sk, struct sk_buff *skb, int segs);
@@ -1084,6 +1086,8 @@
 	void (*pkts_acked)(struct sock *sk, const struct ack_sample *sample);
 	/* override sysctl_tcp_min_tso_segs */
 	u32 (*min_tso_segs)(struct sock *sk);
+	/* suggest number of segments for each skb to transmit (optional) */
+	u32 (*tso_segs_goal)(struct sock *sk);

 	/* call when packets are delivered to update cwnd and pacing rate,
	 * after all the ca_state processing. (optional)
	 */
diff -ruaN net/ipv4/Kconfig net/ipv4/Kconfig
--- net/ipv4/Kconfig	2021-05-19 16:30:06.000000000 +0800
+++ net/ipv4/Kconfig	2021-05-22 11:33:34.898841467 +0800
@@ -486,7 +486,7 @@
 
 config TCP_CONG_CUBIC
 	tristate "CUBIC TCP"
-	default y
+	default m
 	help
 	  This is version 2.0 of BIC-TCP which uses a cubic growth function
 	  among other techniques.
@@ -669,9 +669,18 @@
 	  AQM schemes that do not provide a delay signal. It requires the fq
 	  ("Fair Queue") pacing packet scheduler.
 
+config TCP_CONG_BBRPLUS
+        bool "BBRPLUS TCP"
+        default y
+        help
+
+          BBRplus is an enhanced version of BBR (Bottleneck Bandwidth and RTT).
+          Originally introduced by dog250 & cx9208.
+          Same as BBR, requires the fq ("Fair Queue") pacing packet scheduler.
+
 choice
 	prompt "Default TCP congestion control"
-	default DEFAULT_CUBIC
+	default DEFAULT_BBRPLUS
 	help
 	  Select the TCP congestion control that will be used by default
 	  for all connections.
@@ -706,6 +715,9 @@
 	config DEFAULT_BBR
 		bool "BBR" if TCP_CONG_BBR=y
 
+        config DEFAULT_BBRPLUS
+                bool "BBRPLUS" if TCP_CONG_BBRPLUS=y
+
 	config DEFAULT_RENO
 		bool "Reno"
 endchoice
@@ -730,7 +742,8 @@
 	default "dctcp" if DEFAULT_DCTCP
 	default "cdg" if DEFAULT_CDG
 	default "bbr" if DEFAULT_BBR
-	default "cubic"
+        default "bbrplus" if DEFAULT_BBRPLUS
+	default "bbrplus"
 
 config TCP_MD5SIG
 	bool "TCP: MD5 Signature Option support (RFC2385)"
diff -ruaN net/ipv4/Makefile net/ipv4/Makefile
--- net/ipv4/Makefile	2021-05-19 16:30:06.000000000 +0800
+++ net/ipv4/Makefile	2021-05-22 11:33:34.898841467 +0800
@@ -46,6 +46,7 @@
 obj-$(CONFIG_INET_UDP_DIAG) += udp_diag.o
 obj-$(CONFIG_INET_RAW_DIAG) += raw_diag.o
 obj-$(CONFIG_TCP_CONG_BBR) += tcp_bbr.o
+obj-$(CONFIG_TCP_CONG_BBRPLUS) += tcp_bbrplus.o
 obj-$(CONFIG_TCP_CONG_BIC) += tcp_bic.o
 obj-$(CONFIG_TCP_CONG_CDG) += tcp_cdg.o
 obj-$(CONFIG_TCP_CONG_CUBIC) += tcp_cubic.o
diff -ruaN net/ipv4/tcp_output.c net/ipv4/tcp_output.c
--- net/ipv4/tcp_output.c	2021-05-19 16:30:06.000000000 +0800
+++ net/ipv4/tcp_output.c	2021-05-22 11:33:34.898841467 +0800
@@ -1957,7 +1957,7 @@
 /* Return how many segs we'd like on a TSO packet,
  * to send one TSO packet per ms
  */
-static u32 tcp_tso_autosize(const struct sock *sk, unsigned int mss_now,
+u32 tcp_tso_autosize(const struct sock *sk, unsigned int mss_now,
 			    int min_tso_segs)
 {
 	u32 bytes, segs;
@@ -1975,6 +1975,7 @@
 
 	return segs;
 }
+EXPORT_SYMBOL(tcp_tso_autosize);
 
 /* Return the number of segments we want in the skb we are transmitting.
  * See if congestion control module wants to decide; otherwise, autosize.
diff -ruaN net/sched/Kconfig net/sched/Kconfig
--- net/sched/Kconfig	2021-05-19 16:30:06.000000000 +0800
+++ net/sched/Kconfig	2021-05-22 11:33:34.898841467 +0800
@@ -332,7 +332,8 @@
 	  If unsure, say N.
 
 config NET_SCH_FQ
-	tristate "Fair Queue"
+        bool "Fair Queue"
+        default y
 	help
 	  Say Y here if you want to use the FQ packet scheduling algorithm.
 
@@ -439,8 +440,9 @@
 
 	  If unsure, say N.
 
-menuconfig NET_SCH_DEFAULT
+menuconfig NET_SCH_DEFAULT_BBRP
 	bool "Allow override default queue discipline"
+        default y
 	help
 	  Support for selection of default queuing discipline.
 
@@ -450,11 +452,15 @@
 
 	  If unsure, say N.
 
-if NET_SCH_DEFAULT
+if NET_SCH_DEFAULT_BBRP
+
+config NET_SCH_DEFAULT
+        bool
+        default NET_SCH_DEFAULT_BBRP
 
 choice
 	prompt "Default queuing discipline"
-	default DEFAULT_PFIFO_FAST
+	default DEFAULT_FQ
 	help
 	  Select the queueing discipline that will be used by default
 	  for all network devices.
@@ -485,7 +491,7 @@
 	default "fq_codel" if DEFAULT_FQ_CODEL
 	default "fq_pie" if DEFAULT_FQ_PIE
 	default "sfq" if DEFAULT_SFQ
-	default "pfifo_fast"
+	default "fq"
 endif
 
 comment "Classification"
